<% provide(:title, "Ruby") %>

<h1>Conceptos Ruby</h1>

<ul>
  <li>
    <h4>Interpolación de strings</h4>
    <p>Es un método que permite inyectar variables en una cadena de caracteres.</p>
  </li>
  <li>
    <h4>Cómo se declara un array y cómo se adiciona un elemento al final del array</h4>
    <p>Se declara de la siguiente forma, por ejemplo: a = [99, 98, 97]</p>
    <p>Para adicionar un elemento al final del array se puede utilzar el metodo push. Por ejemplo: a.push(96)  </p>
  </li>
  <li>
    <h4>Cómo se itera un array utilizando el comando each</h4>
    <p>Por ejemplo, así: [99, 98, 97].each {|x|} </p>
  </li>
  <li>
    <h4>Cómo se declara un hash</h4>
    <p>dogs = {}</p>
    <p>dogs["breed"] = "Jack Russel Terrier"</p>
  </li>
  <li>
    <h4>Cómo se itera un hash utilizando el comando each</h4>
    <p>hash.each do | key, value|
    <p>&ensp; puts "#{key}-----"</p>
    <p>&ensp; puts value</p>
    <p>end</p>
  </li>
  <li>
    <h4>Que es un block en ruby? De un ejemplo de cómo utilizarlo</h4>
    <p>Un block es una forma de agrupar varios statements. Se utiliza usando 'do' y 'end' o usando corchetes.</p>
    <p>[1, 2, 3].each do | n |
    <p>&ensp; puts "Número #{n}"</p>
    <p>end</p>
  </li>
  <li>
    <h4>Cual es la convención en Ruby a la hora de nombrar variables?</h4>
    <p></p>
  </li>
  <li>
    <h4>Qué son attr_reader, attr_writer y attr_accesor? Para qué sirven?</h4>
    <p>Son métodos para procesar instancias de variables. Sirven para no crear más variables de las requeridas y mantener un código óptimo.</p>
  </li>
</ul>
